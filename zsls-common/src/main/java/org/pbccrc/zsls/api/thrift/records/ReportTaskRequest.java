/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.pbccrc.zsls.api.thrift.records;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-7")
public class ReportTaskRequest implements org.apache.thrift.TBase<ReportTaskRequest, ReportTaskRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ReportTaskRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReportTaskRequest");

  private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskResults", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReportTaskRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReportTaskRequestTupleSchemeFactory());
  }

  public String domain; // required
  public TNodeId nodeId; // required
  public List<TTaskResult> taskResults; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOMAIN((short)1, "domain"),
    NODE_ID((short)2, "nodeId"),
    TASK_RESULTS((short)3, "taskResults");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOMAIN
          return DOMAIN;
        case 2: // NODE_ID
          return NODE_ID;
        case 3: // TASK_RESULTS
          return TASK_RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNodeId.class)));
    tmpMap.put(_Fields.TASK_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("taskResults", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTaskResult.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReportTaskRequest.class, metaDataMap);
  }

  public ReportTaskRequest() {
  }

  public ReportTaskRequest(
    String domain,
    TNodeId nodeId,
    List<TTaskResult> taskResults)
  {
    this();
    this.domain = domain;
    this.nodeId = nodeId;
    this.taskResults = taskResults;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportTaskRequest(ReportTaskRequest other) {
    if (other.isSetDomain()) {
      this.domain = other.domain;
    }
    if (other.isSetNodeId()) {
      this.nodeId = new TNodeId(other.nodeId);
    }
    if (other.isSetTaskResults()) {
      List<TTaskResult> __this__taskResults = new ArrayList<TTaskResult>(other.taskResults.size());
      for (TTaskResult other_element : other.taskResults) {
        __this__taskResults.add(new TTaskResult(other_element));
      }
      this.taskResults = __this__taskResults;
    }
  }

  public ReportTaskRequest deepCopy() {
    return new ReportTaskRequest(this);
  }

  @Override
  public void clear() {
    this.domain = null;
    this.nodeId = null;
    this.taskResults = null;
  }

  public String getDomain() {
    return this.domain;
  }

  public ReportTaskRequest setDomain(String domain) {
    this.domain = domain;
    return this;
  }

  public void unsetDomain() {
    this.domain = null;
  }

  /** Returns true if field domain is set (has been assigned a value) and false otherwise */
  public boolean isSetDomain() {
    return this.domain != null;
  }

  public void setDomainIsSet(boolean value) {
    if (!value) {
      this.domain = null;
    }
  }

  public TNodeId getNodeId() {
    return this.nodeId;
  }

  public ReportTaskRequest setNodeId(TNodeId nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  public void unsetNodeId() {
    this.nodeId = null;
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return this.nodeId != null;
  }

  public void setNodeIdIsSet(boolean value) {
    if (!value) {
      this.nodeId = null;
    }
  }

  public int getTaskResultsSize() {
    return (this.taskResults == null) ? 0 : this.taskResults.size();
  }

  public java.util.Iterator<TTaskResult> getTaskResultsIterator() {
    return (this.taskResults == null) ? null : this.taskResults.iterator();
  }

  public void addToTaskResults(TTaskResult elem) {
    if (this.taskResults == null) {
      this.taskResults = new ArrayList<TTaskResult>();
    }
    this.taskResults.add(elem);
  }

  public List<TTaskResult> getTaskResults() {
    return this.taskResults;
  }

  public ReportTaskRequest setTaskResults(List<TTaskResult> taskResults) {
    this.taskResults = taskResults;
    return this;
  }

  public void unsetTaskResults() {
    this.taskResults = null;
  }

  /** Returns true if field taskResults is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskResults() {
    return this.taskResults != null;
  }

  public void setTaskResultsIsSet(boolean value) {
    if (!value) {
      this.taskResults = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DOMAIN:
      if (value == null) {
        unsetDomain();
      } else {
        setDomain((String)value);
      }
      break;

    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((TNodeId)value);
      }
      break;

    case TASK_RESULTS:
      if (value == null) {
        unsetTaskResults();
      } else {
        setTaskResults((List<TTaskResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOMAIN:
      return getDomain();

    case NODE_ID:
      return getNodeId();

    case TASK_RESULTS:
      return getTaskResults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOMAIN:
      return isSetDomain();
    case NODE_ID:
      return isSetNodeId();
    case TASK_RESULTS:
      return isSetTaskResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportTaskRequest)
      return this.equals((ReportTaskRequest)that);
    return false;
  }

  public boolean equals(ReportTaskRequest that) {
    if (that == null)
      return false;

    boolean this_present_domain = true && this.isSetDomain();
    boolean that_present_domain = true && that.isSetDomain();
    if (this_present_domain || that_present_domain) {
      if (!(this_present_domain && that_present_domain))
        return false;
      if (!this.domain.equals(that.domain))
        return false;
    }

    boolean this_present_nodeId = true && this.isSetNodeId();
    boolean that_present_nodeId = true && that.isSetNodeId();
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (!this.nodeId.equals(that.nodeId))
        return false;
    }

    boolean this_present_taskResults = true && this.isSetTaskResults();
    boolean that_present_taskResults = true && that.isSetTaskResults();
    if (this_present_taskResults || that_present_taskResults) {
      if (!(this_present_taskResults && that_present_taskResults))
        return false;
      if (!this.taskResults.equals(that.taskResults))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_domain = true && (isSetDomain());
    list.add(present_domain);
    if (present_domain)
      list.add(domain);

    boolean present_nodeId = true && (isSetNodeId());
    list.add(present_nodeId);
    if (present_nodeId)
      list.add(nodeId);

    boolean present_taskResults = true && (isSetTaskResults());
    list.add(present_taskResults);
    if (present_taskResults)
      list.add(taskResults);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReportTaskRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDomain()).compareTo(other.isSetDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, other.domain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskResults()).compareTo(other.isSetTaskResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskResults, other.taskResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReportTaskRequest(");
    boolean first = true;

    sb.append("domain:");
    if (this.domain == null) {
      sb.append("null");
    } else {
      sb.append(this.domain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeId:");
    if (this.nodeId == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskResults:");
    if (this.taskResults == null) {
      sb.append("null");
    } else {
      sb.append(this.taskResults);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (domain == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domain' was not present! Struct: " + toString());
    }
    if (nodeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
    }
    if (taskResults == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskResults' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (nodeId != null) {
      nodeId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReportTaskRequestStandardSchemeFactory implements SchemeFactory {
    public ReportTaskRequestStandardScheme getScheme() {
      return new ReportTaskRequestStandardScheme();
    }
  }

  private static class ReportTaskRequestStandardScheme extends StandardScheme<ReportTaskRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReportTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domain = iprot.readString();
              struct.setDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeId = new TNodeId();
              struct.nodeId.read(iprot);
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.taskResults = new ArrayList<TTaskResult>(_list44.size);
                TTaskResult _elem45;
                for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                {
                  _elem45 = new TTaskResult();
                  _elem45.read(iprot);
                  struct.taskResults.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setTaskResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReportTaskRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(struct.domain);
        oprot.writeFieldEnd();
      }
      if (struct.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        struct.nodeId.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.taskResults != null) {
        oprot.writeFieldBegin(TASK_RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.taskResults.size()));
          for (TTaskResult _iter47 : struct.taskResults)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReportTaskRequestTupleSchemeFactory implements SchemeFactory {
    public ReportTaskRequestTupleScheme getScheme() {
      return new ReportTaskRequestTupleScheme();
    }
  }

  private static class ReportTaskRequestTupleScheme extends TupleScheme<ReportTaskRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReportTaskRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.domain);
      struct.nodeId.write(oprot);
      {
        oprot.writeI32(struct.taskResults.size());
        for (TTaskResult _iter48 : struct.taskResults)
        {
          _iter48.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReportTaskRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.domain = iprot.readString();
      struct.setDomainIsSet(true);
      struct.nodeId = new TNodeId();
      struct.nodeId.read(iprot);
      struct.setNodeIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.taskResults = new ArrayList<TTaskResult>(_list49.size);
        TTaskResult _elem50;
        for (int _i51 = 0; _i51 < _list49.size; ++_i51)
        {
          _elem50 = new TTaskResult();
          _elem50.read(iprot);
          struct.taskResults.add(_elem50);
        }
      }
      struct.setTaskResultsIsSet(true);
    }
  }

}

